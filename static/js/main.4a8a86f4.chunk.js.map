{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/api.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","setAddError","setDeleteError","className","map","post","id","title","type","onClick","handlePostSelect","classNames","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","Loader","NewCommentForm","postId","setComments","useState","name","setName","email","setEmail","setBody","noName","setNoName","noEmail","setNoEmail","noBody","setNoBody","isSubmiting","setIsSubmiting","resetWarnings","onSubmit","e","preventDefault","htmlFor","placeholder","value","onChange","target","trim","result","prevValue","catch","finally","PostDetails","addError","deleteError","comments","isProcessing","setIsProcessing","commentsError","setCommentsError","formIsOpen","setFormIsOpen","useEffect","handleDelete","filter","comment","deleteComment","length","href","UserSelector","users","setPosts","setIsLoadingPosts","selectedUser","setSelectedUser","setPostsError","dropdownActive","setDropdownActive","handleDropdown","handlePostsLoad","getPosts","role","user","App","setUsers","isLoadingPosts","postsError","noPostsWarning","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a8a86f4.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n  setDeleteError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    selectedPost,\n    setSelectedPost,\n    setAddError,\n    setDeleteError,\n  },\n) => {\n  const handlePostSelect = (post: Post) => {\n    setAddError(false);\n    setDeleteError(false);\n\n    if (post.id === selectedPost?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  onClick={() => handlePostSelect(post)}\n                  className={classNames(\n                    'button is-link',\n                    {\n                      'is-light': post.id !== selectedPost?.id,\n\n                    },\n                  )}\n                >\n                  {post.id !== selectedPost?.id ? ('Open') : ('Close')}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { addComment } from '../api/api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  {\n    postId,\n    setComments,\n    setAddError,\n  },\n) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [noName, setNoName] = useState(false);\n  const [noEmail, setNoEmail] = useState(false);\n  const [noBody, setNoBody] = useState(false);\n  const [isSubmiting, setIsSubmiting] = useState(false);\n\n  const resetWarnings = () => {\n    setNoName(false);\n    setNoEmail(false);\n    setNoBody(false);\n  };\n\n  const clearFields = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    resetWarnings();\n  };\n\n  const handleSubmit = () => {\n    resetWarnings();\n    setAddError(false);\n\n    if (!name.trim()) {\n      setNoName(true);\n    }\n\n    if (!email.trim()) {\n      setNoEmail(true);\n    }\n\n    if (!body.trim()) {\n      setNoBody(true);\n    }\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      setIsSubmiting(false);\n\n      return;\n    }\n\n    setIsSubmiting(true);\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then(result => setComments(prevValue => [...prevValue, result]))\n      .catch(() => setAddError(true))\n      .finally(() => {\n        setIsSubmiting(false);\n        setBody('');\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={e => e.preventDefault()}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': noName })}\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {noName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': noEmail })}\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {noEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': noEmail })}\n            value={body}\n            onChange={e => setBody(e.target.value)}\n          />\n        </div>\n\n        {noBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': isSubmiting,\n              },\n            )}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link\n            is-light\"\n            onClick={clearFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, {\n  Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport { deleteComment, getComments } from '../api/api';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post;\n  addError: boolean;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n  deleteError: boolean;\n  setDeleteError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    selectedPost,\n    addError,\n    setAddError,\n    deleteError,\n    setDeleteError,\n  },\n) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n  const [formIsOpen, setFormIsOpen] = useState(false);\n\n  useEffect(() => {\n    setCommentsError(false);\n    setIsProcessing(true);\n    setFormIsOpen(false);\n\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setCommentsError(true))\n      .finally(() => setIsProcessing(false));\n  }, [selectedPost]);\n\n  const handleDelete = (id: number) => {\n    setDeleteError(false);\n    setComments(\n      prevValue => prevValue.filter(comment => comment.id !== id),\n    );\n\n    deleteComment(id)\n      .catch(() => setDeleteError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isProcessing && (\n            <Loader />\n          )}\n\n          {commentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isProcessing && (\n            <>\n              {comments.length === 0 ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <p className=\"title is-4\">Comments:</p>\n              )}\n\n              {addError && (\n                <div\n                  className=\"notification is-danger\"\n                >\n                  Unable add comment!\n                </div>\n              )}\n\n              {deleteError && (\n                <div\n                  className=\"notification is-danger\"\n                >\n                  Unable delete comment!\n                </div>\n              )}\n\n              {comments.map(comment => (\n                <article\n                  key={comment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={comment.email} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!formIsOpen && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setFormIsOpen(prevValue => !prevValue)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {formIsOpen && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            setComments={setComments}\n            setAddError={setAddError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { getPosts } from '../api/api';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  setPosts: Dispatch<SetStateAction<Post[]>>;\n  setIsLoadingPosts: Dispatch<SetStateAction<boolean>>;\n  selectedUser: User | null;\n  setSelectedUser: Dispatch<SetStateAction<User | null>>;\n  setPostsError: Dispatch<SetStateAction<boolean>>;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = (\n  {\n    users,\n    setPosts,\n    setIsLoadingPosts,\n    selectedUser,\n    setSelectedUser,\n    setPostsError,\n    setSelectedPost,\n  },\n) => {\n  const [dropdownActive, setDropdownActive] = useState(false);\n\n  const handleDropdown = () => {\n    setDropdownActive(\n      (prevValue) => !prevValue,\n    );\n  };\n\n  const handlePostsLoad = (id: number) => {\n    setSelectedPost(null);\n    setPostsError(false);\n    handleDropdown();\n    setIsLoadingPosts(true);\n\n    getPosts(id)\n      .then(setPosts)\n      .catch(() => setPostsError(true))\n      .finally(() => {\n        setIsLoadingPosts(false);\n      });\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdownActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n        >\n          <span>{selectedUser ? (selectedUser.name) : ('Choose a user')}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': user.id === selectedUser?.id,\n                },\n              )}\n              onClick={() => {\n                setSelectedUser(user);\n                handlePostsLoad(user.id);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [postsError, setPostsError] = useState(false);\n  const [addError, setAddError] = useState(false);\n  const [deleteError, setDeleteError] = useState(false);\n\n  const noPostsWarning\n    = (!postsError && posts.length === 0 && selectedUser && !isLoadingPosts);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setPosts={setPosts}\n                  setIsLoadingPosts={setIsLoadingPosts}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setPostsError={setPostsError}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && (<Loader />)}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setDeleteError={setDeleteError}\n                    setAddError={setAddError}\n                  />\n                )}\n\n                {noPostsWarning && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost?.id,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  addError={addError}\n                  setAddError={setAddError}\n                  deleteError={deleteError}\n                  setDeleteError={setDeleteError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}