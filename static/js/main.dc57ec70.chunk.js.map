{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","utils/fetchClient.ts","components/CommentItem.tsx","components/CommentsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","api/api.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostItem","post","handlePostSelect","selectedPostId","id","title","className","type","onClick","classNames","PostsList","posts","selectedPost","setSelectedPost","setAddError","setDeleteError","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","CommentItem","comment","handleDelete","href","email","name","CommentsList","comments","Loader","NewCommentForm","postId","setComments","useState","setName","setEmail","setBody","noName","setNoName","noEmail","setNoEmail","noBody","setNoBody","isSubmiting","setIsSubmiting","resetWarnings","onSubmit","e","preventDefault","htmlFor","placeholder","value","onChange","target","trim","result","prevValue","catch","finally","PostDetails","addError","deleteError","isProcessing","setIsProcessing","commentsError","setCommentsError","formIsOpen","setFormIsOpen","useEffect","length","deleteComment","filter","UserSelector","users","setPosts","setIsLoadingPosts","selectedUser","setSelectedUser","setPostsError","dropdownActive","setDropdownActive","document","addEventListener","event","dropdown","querySelector","userSelector","contains","handleDropdown","handlePostsLoad","user","role","App","setUsers","isLoadingPosts","postsError","usersError","setUsersError","noPostsWarning","ReactDOM","render","getElementById"],"mappings":"+QASaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,KACAC,EAFuC,EAEvCA,iBACAC,EAHuC,EAGvCA,eAHuC,OAKvC,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBF,EAAKG,KAE3B,oBAAI,UAAQ,YAAZ,SACGH,EAAKI,QAGR,oBAAIC,UAAU,8BAAd,SACE,wBACEC,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMN,EAAiBD,IAChCK,UAAWG,IACT,iBACA,CACE,WAAYR,EAAKG,KAAOD,IAP9B,SAYGF,EAAKG,KAAOD,EAAkB,OAAW,gBCtBrCO,EAA6B,SAAC,GAMpC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,YACAC,EACI,EADJA,eAEMb,EAAmB,SAACD,GACxBa,GAAY,GACZC,GAAe,GAEXd,EAAKG,MAAL,OAAYQ,QAAZ,IAAYA,OAAZ,EAAYA,EAAcR,IAM9BS,EAAgBZ,GALdY,EAAgB,OAQpB,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGP,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGK,EAAMK,KAAI,SAAAf,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,EACNE,eAAiBS,EAAmBA,EAAaR,GAAjB,EAChCF,iBAAkBA,GAHbD,EAAKG,gBChDlBa,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADI,KAEVC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAGZ,OAAOF,EAASG,UAIf,IAAMC,EACN,SAAId,GAAJ,OAAoBD,EAAWC,IADzBc,EAEL,SAAId,EAAaE,GAAjB,OAAmCH,EAAWC,EAAK,OAAQE,IAFtDY,EAIH,SAACd,GAAD,OAAiBD,EAAQC,EAAK,WCnC3Be,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAZ,OAC1C,0BAEEnC,UAAU,mBACV,UAAQ,UAHV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGoC,KAAI,iBAAYF,EAAQG,OAAS,UAAQ,gBAA5C,SACGH,EAAQI,OAEX,wBACE,UAAQ,gBACRrC,KAAK,SACLD,UAAU,kBACV,aAAW,SACXE,QAAS,kBAAMiC,EAAaD,EAAQpC,KALtC,8BAWF,qBAAKE,UAAU,eAAe,UAAQ,cAAtC,SACGkC,EAAQZ,SApBNY,EAAQpC,KCFJyC,EAAgC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUL,EAAb,EAAaA,aAAb,OAC3C,mCACGK,EAAS9B,KAAI,SAAAwB,GAAO,OACnB,cAAC,EAAD,CAAaA,QAASA,EAASC,aAAcA,UCTtCM,G,MAAS,kBACpB,qBAAKzC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wB,OCON0C,EAAkC,SAAC,GAIzC,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,YACApC,EACI,EADJA,YAEA,EAAwBqC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOR,EAAP,KAAcU,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOvB,EAAP,KAAa0B,EAAb,KACA,EAA4BH,oBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACA,EAA4BP,oBAAS,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KACA,EAAsCT,oBAAS,GAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KAEMC,EAAgB,WACpBP,GAAU,GACVE,GAAW,GACXE,GAAU,IAgDZ,OACE,uBAAM,UAAQ,iBAAiBI,SAAU,SAAAC,GAAC,OAAIA,EAAEC,kBAAhD,UACE,sBAAK5D,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ6D,QAAQ,sBAAjC,yBAIA,sBAAK7D,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLqC,KAAK,OACLxC,GAAG,sBACHgE,YAAY,eACZ9D,UAAWG,IAAW,QAAS,CAAE,YAAa8C,IAC9Cc,MAAOzB,EACP0B,SAAU,SAAAL,GAAC,OAAIb,EAAQa,EAAEM,OAAOF,UAGlC,sBAAM/D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdiD,GACC,sBACEjD,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBiD,GACC,mBAAGjD,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQ6D,QAAQ,uBAAjC,0BAIA,sBAAK7D,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLqC,KAAK,QACLxC,GAAG,uBACHgE,YAAY,iBACZ9D,UAAWG,IAAW,QAAS,CAAE,YAAagD,IAC9CY,MAAO1B,EACP2B,SAAU,SAAAL,GAAC,OAAIZ,EAASY,EAAEM,OAAOF,UAGnC,sBAAM/D,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGdmD,GACC,sBACEnD,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBmD,GACC,mBAAGnD,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQ6D,QAAQ,eAAjC,0BAIA,qBAAK7D,UAAU,UAAf,SACE,0BACEF,GAAG,eACHwC,KAAK,OACLwB,YAAY,oBACZ9D,UAAWG,IAAW,WAAY,CAAE,YAAagD,IACjDY,MAAOzC,EACP0C,SAAU,SAAAL,GAAC,OAAIX,EAAQW,EAAEM,OAAOF,YAInCV,GACC,mBAAGrD,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAWG,IACT,iBACA,CACE,aAAcoD,IAGlBrD,QAnJW,WCpBG,IAACkB,GDqBvBqC,IACAjD,GAAY,GAEP8B,EAAK4B,QACRhB,GAAU,GAGPb,EAAM6B,QACTd,GAAW,GAGR9B,EAAK4C,QACRZ,GAAU,GAGPhB,EAAK4B,QAAW7B,EAAM6B,QAAW5C,EAAK4C,SAM3CV,GAAe,IC1CQpC,ED4CZ,CACTuB,SACAL,OACAD,QACAf,QC/CGU,EAAqB,YAAaZ,IDiDpCM,MAAK,SAAAyC,GAAM,OAAIvB,GAAY,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,UACvDE,OAAM,kBAAM7D,GAAY,MACxB8D,SAAQ,WACPd,GAAe,GACfR,EAAQ,QAjBVQ,GAAe,IA0HX,mBAcF,qBAAKxD,UAAU,UAAf,SAEE,wBACEC,KAAK,QACLD,UAAU,0BAEVE,QAtKU,WAClB4C,EAAQ,IACRC,EAAS,IACTC,EAAQ,IACRS,KA8JM,4BE9KGc,EAA+B,SAAC,GAMtC,IALLjE,EAKI,EALJA,aACAkE,EAII,EAJJA,SACAhE,EAGI,EAHJA,YACAiE,EAEI,EAFJA,YACAhE,EACI,EADJA,eAEA,EAAgCoC,mBAAoB,IAApD,mBAAOL,EAAP,KAAiBI,EAAjB,KACA,EAAwCC,oBAAS,GAAjD,mBAAO6B,EAAP,KAAqBC,EAArB,KACA,EAA0C9B,oBAAS,GAAnD,mBAAO+B,EAAP,KAAsBC,EAAtB,KACA,EAAoChC,oBAAS,GAA7C,mBAAOiC,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WDjBe,IAAClF,ECkBxB+E,GAAiB,GACjBF,GAAgB,GAChBI,GAAc,IDpBUjF,ECsBZQ,EAAaR,GDrBpBkC,EAAA,2BAA0ClC,KCsB5C4B,KAAKkB,GACLyB,OAAM,kBAAMQ,GAAiB,MAC7BP,SAAQ,kBAAMK,GAAgB,QAChC,CAACrE,IAYJ,OACE,qBAAKN,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACOM,EAAaR,GADpB,aAC2BQ,EAAaP,SAGxC,mBAAG,UAAQ,WAAX,SACGO,EAAagB,UAIlB,sBAAKtB,UAAU,QAAf,UACG0E,GACC,cAAC,EAAD,IAGDE,GACC,qBAAK5E,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKA0E,GACA,qCACIlC,EAASyC,OAKT,mBAAGjF,UAAU,aAAb,uBAJA,mBAAGA,UAAU,aAAa,UAAQ,oBAAlC,6BAODwE,GACC,qBACExE,UAAU,yBADZ,oCAODyE,GACC,qBACEzE,UAAU,yBADZ,uCAOF,cAAC,EAAD,CACEwC,SAAUA,EACVL,aA9DO,SAACrC,GACpBW,GAAe,GDrBU,SAACX,GAC5B,OAAOkC,EAAA,oBAA2BlC,ICsBhCoF,CAAcpF,GACX4B,MAAK,kBAAMkB,GACV,SAAAwB,GAAS,OAAIA,EAAUe,QAAO,SAAAjD,GAAO,OAAIA,EAAQpC,KAAOA,WAEzDuE,OAAM,kBAAM5D,GAAe,UA0DlBqE,GACA,wBACE,UAAQ,qBACR7E,KAAK,SACLD,UAAU,iBACVE,QAAS,kBAAM6E,GAAc,SAAAX,GAAS,OAAKA,MAJ7C,mCAaPU,GACC,cAAC,EAAD,CACEnC,OAAQrC,EAAaR,GACrB8C,YAAaA,EACbpC,YAAaA,UC5GZ4E,EAAgC,SAAC,GAQvC,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAC,EAKI,EALJA,kBACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,cACAnF,EACI,EADJA,gBAEA,EAA4CsC,oBAAS,GAArD,mBAAO8C,EAAP,KAAuBC,EAAvB,KAEAC,SAASC,iBAAiB,SAAS,SAACC,GAClC,IAAMC,EAAWH,SAASI,cAAc,aAElCC,EAAeH,EAAM9B,OAE3B,OAAI+B,QAAJ,IAAIA,KAAUG,SAASD,IAIvBN,GAAkB,MAGpB,IAAMQ,EAAiB,WACrBR,GACE,SAACxB,GAAD,OAAgBA,MAIdiC,EAAkB,SAACC,GFpCH,IAACxG,EEqCrB2F,EAAgBa,GAChB/F,EAAgB,MAChBmF,GAAc,GACdU,IACAb,GAAkB,IFzCGzF,EE2CZwG,EAAKxG,GF1CTkC,EAAA,wBAAoClC,KE2CtC4B,KAAK4D,GACLjB,OAAM,kBAAMqB,GAAc,MAC1BpB,SAAQ,WACPiB,GAAkB,OAIxB,OACE,sBACE,UAAQ,eACRvF,UAAWG,IAAW,WAAY,CAAE,YAAawF,IAFnD,UAIE,qBAAK3F,UAAU,mBAAf,SACE,yBACEC,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdE,QAASkG,EALX,UAOE,+BAAOZ,EAAgBA,EAAalD,KAAS,kBAE7C,sBAAMtC,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKnD,qBAAKA,UAAU,gBAAgBF,GAAG,gBAAgByG,KAAK,OAAvD,SACE,qBAAKvG,UAAU,mBAAf,SACGqF,EAAM3E,KAAI,SAAA4F,GAAI,OACb,mBAEElE,KAAI,gBAAWkE,EAAKxG,IACpBE,UAAWG,IACT,gBACA,CACE,YAAamG,EAAKxG,MAAL,OAAY0F,QAAZ,IAAYA,OAAZ,EAAYA,EAAc1F,MAG3CI,QAAS,kBAAMmG,EAAgBC,IATjC,SAWGA,EAAKhE,MAVDgE,EAAKxG,eCvEX0G,EAAgB,WAC3B,MAA0B3D,mBAAiB,IAA3C,mBAAOwC,EAAP,KAAcoB,EAAd,KACA,EAA0B5D,mBAAiB,IAA3C,mBAAOxC,EAAP,KAAciF,EAAd,KACA,EAAwCzC,mBAAsB,MAA9D,mBAAO2C,EAAP,KAAqBC,EAArB,KACA,EAAwC5C,mBAAsB,MAA9D,mBAAOvC,EAAP,KAAqBC,EAArB,KACA,EAA4CsC,oBAAS,GAArD,mBAAO6D,EAAP,KAAuBnB,EAAvB,KACA,EAAoC1C,oBAAS,GAA7C,mBAAO8D,EAAP,KAAmBjB,EAAnB,KACA,EAAgC7C,oBAAS,GAAzC,mBAAO2B,EAAP,KAAiBhE,EAAjB,KACA,EAAsCqC,oBAAS,GAA/C,mBAAO4B,EAAP,KAAoBhE,EAApB,KACA,EAAoCoC,oBAAS,GAA7C,mBAAO+D,EAAP,KAAmBC,EAAnB,KAEMC,GACDH,IAAetG,EAAM4E,QAAUO,IAAiBkB,EAQrD,OANA1B,qBAAU,WHtBHhD,EAAmB,UGwBrBN,KAAK+E,GACLpC,MAAMwC,KACR,IAGD,sBAAM7G,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEqF,MAAOA,EACPC,SAAUA,EACVC,kBAAmBA,EACnBC,aAAcA,EACdC,gBAAiBA,EACjBC,cAAeA,EACfnF,gBAAiBA,MAIrB,sBAAKP,UAAU,QAAQ,UAAQ,cAA/B,WACKwF,IAAiBoB,GAClB,mBAAG,UAAQ,iBAAX,8BAKDA,GACC,qBACE5G,UAAU,yBADZ,mCAOD0G,GAAmB,cAAC,EAAD,IAEnBC,GACC,qBACE3G,UAAU,yBACV,UAAQ,oBAFV,mCAQDK,EAAM4E,OAAS,GACd,cAAC,EAAD,CACE5E,MAAOA,EACPC,aAAcA,EACdC,gBAAiBA,EACjBE,eAAgBA,EAChBD,YAAaA,IAIhBsG,GACC,qBACE9G,UAAU,0BACV,UAAQ,aAFV,kCAWR,qBACE,UAAQ,UACRA,UAAWG,IACT,OACA,YACA,eACA,UACA,CACE,uBAAiBG,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAcR,KARrC,SAYE,qBAAKE,UAAU,gCAAf,SACGM,GACC,cAAC,EAAD,CACEA,aAAcA,EACdkE,SAAUA,EACVhE,YAAaA,EACbiE,YAAaA,EACbhE,eAAgBA,gBCnHlCsG,IAASC,OACP,cAAC,EAAD,IACAnB,SAASoB,eAAe,W","file":"static/js/main.dc57ec70.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPostId: number;\n  handlePostSelect: (post: Post) => void;\n};\n\nexport const PostItem: React.FC<Props> = ({\n  post,\n  handlePostSelect,\n  selectedPostId,\n}) => (\n  <tr data-cy=\"Post\">\n    <td data-cy=\"PostId\">{post.id}</td>\n\n    <td data-cy=\"PostTitle\">\n      {post.title}\n    </td>\n\n    <td className=\"has-text-right is-vcentered\">\n      <button\n        type=\"button\"\n        data-cy=\"PostButton\"\n        onClick={() => handlePostSelect(post)}\n        className={classNames(\n          'button is-link',\n          {\n            'is-light': post.id !== selectedPostId,\n\n          },\n        )}\n      >\n        {post.id !== selectedPostId ? ('Open') : ('Close')}\n      </button>\n    </td>\n  </tr>\n);\n","import React, { Dispatch, SetStateAction } from 'react';\nimport { Post } from '../types/Post';\nimport { PostItem } from './PostItem';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n  setDeleteError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setAddError,\n  setDeleteError,\n}) => {\n  const handlePostSelect = (post: Post) => {\n    setAddError(false);\n    setDeleteError(false);\n\n    if (post.id === selectedPost?.id) {\n      setSelectedPost(null);\n\n      return;\n    }\n\n    setSelectedPost(post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              selectedPostId={!selectedPost ? 0 : selectedPost.id}\n              handlePostSelect={handlePostSelect}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comment: Comment;\n  handleDelete: (id: number) => void;\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment, handleDelete }) => (\n  <article\n    key={comment.id}\n    className=\"message is-small\"\n    data-cy=\"Comment\"\n  >\n    <div className=\"message-header\">\n      <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n        {comment.name}\n      </a>\n      <button\n        data-cy=\"CommentDelete\"\n        type=\"button\"\n        className=\"delete is-small\"\n        aria-label=\"delete\"\n        onClick={() => handleDelete(comment.id)}\n      >\n        delete button\n      </button>\n    </div>\n\n    <div className=\"message-body\" data-cy=\"CommentBody\">\n      {comment.body}\n    </div>\n  </article>\n);\n","import { Comment } from '../types/Comment';\nimport { CommentItem } from './CommentItem';\n\ntype Props = {\n  comments: Comment[];\n  handleDelete: (id: number) => void;\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments, handleDelete }) => (\n  <>\n    {comments.map(comment => (\n      <CommentItem comment={comment} handleDelete={handleDelete} />\n    ))}\n  </>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { addComment } from '../api/api';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number;\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setAddError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [noName, setNoName] = useState(false);\n  const [noEmail, setNoEmail] = useState(false);\n  const [noBody, setNoBody] = useState(false);\n  const [isSubmiting, setIsSubmiting] = useState(false);\n\n  const resetWarnings = () => {\n    setNoName(false);\n    setNoEmail(false);\n    setNoBody(false);\n  };\n\n  const clearFields = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    resetWarnings();\n  };\n\n  const handleSubmit = () => {\n    resetWarnings();\n    setAddError(false);\n\n    if (!name.trim()) {\n      setNoName(true);\n    }\n\n    if (!email.trim()) {\n      setNoEmail(true);\n    }\n\n    if (!body.trim()) {\n      setNoBody(true);\n    }\n\n    if (!name.trim() || !email.trim() || !body.trim()) {\n      setIsSubmiting(false);\n\n      return;\n    }\n\n    setIsSubmiting(true);\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    })\n      .then(result => setComments(prevValue => [...prevValue, result]))\n      .catch(() => setAddError(true))\n      .finally(() => {\n        setIsSubmiting(false);\n        setBody('');\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={e => e.preventDefault()}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': noName })}\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {noName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': noEmail })}\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {noEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {noEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': noEmail })}\n            value={body}\n            onChange={e => setBody(e.target.value)}\n          />\n        </div>\n\n        {noBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': isSubmiting,\n              },\n            )}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link\n            is-light\"\n            onClick={clearFields}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const addComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, {\n  Dispatch, SetStateAction, useEffect, useState,\n} from 'react';\nimport { deleteComment, getComments } from '../api/api';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post;\n  addError: boolean;\n  setAddError: Dispatch<SetStateAction<boolean>>;\n  deleteError: boolean;\n  setDeleteError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  addError,\n  setAddError,\n  deleteError,\n  setDeleteError,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n  const [formIsOpen, setFormIsOpen] = useState(false);\n\n  useEffect(() => {\n    setCommentsError(false);\n    setIsProcessing(true);\n    setFormIsOpen(false);\n\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setCommentsError(true))\n      .finally(() => setIsProcessing(false));\n  }, [selectedPost]);\n\n  const handleDelete = (id: number) => {\n    setDeleteError(false);\n\n    deleteComment(id)\n      .then(() => setComments(\n        prevValue => prevValue.filter(comment => comment.id !== id),\n      ))\n      .catch(() => setDeleteError(true));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isProcessing && (\n            <Loader />\n          )}\n\n          {commentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isProcessing && (\n            <>\n              {!comments.length ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <p className=\"title is-4\">Comments:</p>\n              )}\n\n              {addError && (\n                <div\n                  className=\"notification is-danger\"\n                >\n                  Unable to add comment!\n                </div>\n              )}\n\n              {deleteError && (\n                <div\n                  className=\"notification is-danger\"\n                >\n                  Unable to delete comment!\n                </div>\n              )}\n\n              <CommentsList\n                comments={comments}\n                handleDelete={handleDelete}\n              />\n\n              {!formIsOpen && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setFormIsOpen(prevValue => !prevValue)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {formIsOpen && (\n          <NewCommentForm\n            postId={selectedPost.id}\n            setComments={setComments}\n            setAddError={setAddError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { Dispatch, SetStateAction, useState } from 'react';\nimport { getPosts } from '../api/api';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  setPosts: Dispatch<SetStateAction<Post[]>>;\n  setIsLoadingPosts: Dispatch<SetStateAction<boolean>>;\n  selectedUser: User | null;\n  setSelectedUser: Dispatch<SetStateAction<User | null>>;\n  setPostsError: Dispatch<SetStateAction<boolean>>;\n  setSelectedPost: Dispatch<SetStateAction<Post | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  setPosts,\n  setIsLoadingPosts,\n  selectedUser,\n  setSelectedUser,\n  setPostsError,\n  setSelectedPost,\n}) => {\n  const [dropdownActive, setDropdownActive] = useState(false);\n\n  document.addEventListener('click', (event) => {\n    const dropdown = document.querySelector('.dropdown');\n\n    const userSelector = event.target as Node;\n\n    if (dropdown?.contains(userSelector)) {\n      return;\n    }\n\n    setDropdownActive(false);\n  });\n\n  const handleDropdown = () => {\n    setDropdownActive(\n      (prevValue) => !prevValue,\n    );\n  };\n\n  const handlePostsLoad = (user: User) => {\n    setSelectedUser(user);\n    setSelectedPost(null);\n    setPostsError(false);\n    handleDropdown();\n    setIsLoadingPosts(true);\n\n    getPosts(user.id)\n      .then(setPosts)\n      .catch(() => setPostsError(true))\n      .finally(() => {\n        setIsLoadingPosts(false);\n      });\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdownActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n        >\n          <span>{selectedUser ? (selectedUser.name) : ('Choose a user')}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': user.id === selectedUser?.id,\n                },\n              )}\n              onClick={() => handlePostsLoad(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [postsError, setPostsError] = useState(false);\n  const [addError, setAddError] = useState(false);\n  const [deleteError, setDeleteError] = useState(false);\n  const [usersError, setUsersError] = useState(false);\n\n  const noPostsWarning\n    = !postsError && !posts.length && selectedUser && !isLoadingPosts;\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(setUsersError);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setPosts={setPosts}\n                  setIsLoadingPosts={setIsLoadingPosts}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setPostsError={setPostsError}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!selectedUser && !usersError) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {usersError && (\n                  <div\n                    className=\"notification is-danger\"\n                  >\n                    Unable to load users!\n                  </div>\n                )}\n\n                {isLoadingPosts && (<Loader />)}\n\n                {postsError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setDeleteError={setDeleteError}\n                    setAddError={setAddError}\n                  />\n                )}\n\n                {noPostsWarning && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost?.id,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  addError={addError}\n                  setAddError={setAddError}\n                  deleteError={deleteError}\n                  setDeleteError={setDeleteError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}